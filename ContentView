//
//  ContentView.swift
//  messagineapp453
//
//  Created by Chase Morrone on 12/1/23.
//

import SwiftUI
import UIKit
import Firebase
import FirebaseAuth
import FirebaseFirestore
struct Message {
    var id: String
    var senderId: String
    var text: String
    // Add other necessary properties
}

struct Conversation {
    var id: String
    var participants: [String]
    var messages: [Message]
    // Add other necessary properties
}

class YourViewController: UIViewController {

    @IBAction func signInButtonPressed(_ sender: UIButton) {
            Auth.auth().signIn(withEmail: "user@example.com", password: "password") { authResult, error in
                if let error = error {
                    // Handle sign-in error
                    print("Error signing in:", error.localizedDescription)
                } else {
                    // User signed in successfully
                    print("User signed in:", authResult?.user.uid ?? "")
                    // Proceed to your app's main functionality or UI
                }
            }
        }
        
        @IBAction func signUpButtonPressed(_ sender: UIButton) {
            Auth.auth().createUser(withEmail: "user@example.com", password: "password") { authResult, error in
                if let error = error {
                    // Handle sign-up error
                    print("Error signing up:", error.localizedDescription)
                } else {
                    // User signed up successfully
                    print("User signed up:", authResult?.user.uid ?? "")
                    // Proceed to your app's main functionality or UI
                }
            }
        }
    
    // Implement FUIAuthDelegate methods if needed
}
func listenForMessages(conversationId: String) {
    let db = Firestore.firestore()
    
    db.collection("Conversations").document(conversationId).collection("Messages")
        .order(by: "timestamp", descending: false)
        .addSnapshotListener { querySnapshot, error in
            guard let snapshot = querySnapshot else {
                print("Error listening for messages:", error?.localizedDescription ?? "Unknown error")
                return
            }
            
            for change in snapshot.documentChanges {
                if change.type == .added {
                    // Handle new message added
                    let messageData = change.document.data()
                    // Update UI with the new message
                }
            }
        }
}

    // Implement FUIAuthDelegate methods if needed


func sendMessage(conversationId: String, senderId: String, messageText: String) {
    let db = Firestore.firestore()
    let messageData: [String: Any] = [
        "senderId": senderId,
        "text": messageText,
        "timestamp": Timestamp()
    ]
    
    db.collection("Conversations").document(conversationId).collection("Messages")
        .addDocument(data: messageData) { error in
            if let error = error {
                // Handle error while sending message
                print("Error sending message:", error.localizedDescription)
            } else {
                // Message sent successfully
                print("Message sent!")
            }
        }
}


struct ContentView: View {
    var body: some View {
            NavigationView {
                VStack {
                    List {
                        // Display list of conversations
                        Text("Conversation 1")
                        Text("Conversation 2")
                        // ... and so on
                    }
                    .navigationTitle("Messages")
                    
                    Divider()
                    
                    // Chat interface
                    VStack {
                        ScrollView {
                            Text("Message 1")
                            Text("Message 2")
                            // ... and so on
                        }
                        
                        HStack {
                            // Input field for typing messages
                            TextField("Type a message", text: .constant(""))
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                            
                            Button("Send") {
                                // Handle sending message
                            }
                        }
                        .padding()
                    }
                }
            }
        }
}

#Preview {
    ContentView()
}
